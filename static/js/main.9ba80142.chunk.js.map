{"version":3,"sources":["Components/Section/Section.js","Components/Feedback/FeedbackOptions.js","Components/Statistics/Statistics.js","Components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["Section","title","children","FeedbackOptions","onLeaveFeedback","options","className","map","option","type","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","handleIncrement","setState","countTotalFeedback","Object","values","reduce","acc","value","countPositiveFeedbackPercentage","totalFeedbacks","Math","round","this","keys","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAGe,SAASA,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,gCACE,6BAAKD,IACJC,KCaQC,MAhBf,YAAwD,IAA7BC,EAA4B,EAA5BA,gBAAiBC,EAAW,EAAXA,QAC1C,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBACEC,KAAK,SACLC,QAAS,kBAAMN,EAAgBI,IAFjC,SAKGA,GAFIA,SCSAG,MAhBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,qBAAKV,UAAU,YAAf,SACE,qBAAIA,UAAU,OAAd,UACE,qBAAIA,UAAU,OAAd,mBAA4BM,KAC5B,qBAAIN,UAAU,OAAd,sBAA+BO,KAC/B,qBAAIP,UAAU,OAAd,kBAA2BQ,KAC3B,qBAAIR,UAAU,OAAd,8BAAuCS,OACvC,qBAAIT,UAAU,OAAd,2CACiCU,IADjC,aCRO,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OACE,8BACE,4BAAIA,M,ICwDKC,E,4MAtDbC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,gBAAkB,SAAAb,GAChB,EAAKc,SAAL,eAAiBd,EAAS,EAAKY,MAAMZ,GAAU,K,EAGjDe,mBAAqB,WACnB,OAAOC,OAAOC,OAAO,EAAKL,OAAOM,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAMC,IAAO,I,EAGvEC,gCAAkC,WAAO,IAC/BjB,EAAS,EAAKQ,MAAdR,KACFkB,EAAiBN,OAAOC,OAAO,EAAKL,OAAOM,QAC/C,SAACC,EAAKC,GAAN,OAAgBD,EAAMC,IACtB,GAIF,OAF2BG,KAAKC,MAAOpB,EAAOkB,EAAkB,M,uDAKxD,IAAD,EACwBG,KAAKb,MAA5BR,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IAEvB,OACE,sBAAKR,UAAU,MAAf,UACE,cAACN,EAAD,CAASC,MAAM,wBAAf,SACE,cAAC,EAAD,CACEG,gBAAiB6B,KAAKZ,gBACtBhB,QAASmB,OAAOU,KAAKD,KAAKb,WAG9B,cAACpB,EAAD,CAASC,MAAM,aAAf,SACGgC,KAAKV,qBACJ,cAAC,EAAD,CACEX,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOkB,KAAKV,mBACZP,mBAAoBiB,KAAKJ,kCAG3B,cAACZ,EAAD,CAAcC,QAAQ,+B,GA/ChBiB,aCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9ba80142.chunk.js","sourcesContent":["import React from 'react';\n// import s from \"./Section.module.css\";\n\nexport default function Section({ title, children }) {\n  return (\n    <div>\n      <h2>{title}</h2>\n      {children}\n    </div>\n  );\n}\n","import React from 'react';\n// import s from \"./FeedbackButtons.module.css\";\n// import PropTypes from \"prop-types\";\n\nfunction FeedbackOptions({ onLeaveFeedback, options }) {\n  return (\n    <div className=\"container\">\n      {options.map(option => (\n        <button\n          type=\"button\"\n          onClick={() => onLeaveFeedback(option)}\n          key={option}\n        >\n          {option}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default FeedbackOptions;\n","import React from 'react';\n// import s from \"./Statistics.module.css\";\n// import PropTypes from \"prop-types\";\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <div className=\"container\">\n      <ul className=\"list\">\n        <li className=\"item\">Good: {good}</li>\n        <li className=\"item\">Neutral: {neutral}</li>\n        <li className=\"item\">Bad: {bad}</li>\n        <li className=\"item\">Total Feedbacks: {total()}</li>\n        <li className=\"item\">\n          Positive Feedback Percentage: {positivePercentage()}%\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default Statistics;\n","import React from 'react';\n// import s from \"./Notification.module.css\";\n// import PropTypes from \"prop-types\";\n\nexport default function Notification({ message }) {\n  return (\n    <div>\n      <p>{message}</p>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport Section from './Components/Section/Section';\nimport FeedbackOptions from './Components/Feedback/FeedbackOptions';\nimport Statistics from './Components/Statistics/Statistics';\nimport Notification from './Components/Notification/Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleIncrement = option => {\n    this.setState({ [option]: this.state[option] + 1 });\n  };\n\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((acc, value) => acc + value, 0);\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    const totalFeedbacks = Object.values(this.state).reduce(\n      (acc, value) => acc + value,\n      0,\n    );\n    const positivePercentage = Math.round((good / totalFeedbacks) * 100);\n\n    return positivePercentage;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            onLeaveFeedback={this.handleIncrement}\n            options={Object.keys(this.state)}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback}\n              positivePercentage={this.countPositiveFeedbackPercentage}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}